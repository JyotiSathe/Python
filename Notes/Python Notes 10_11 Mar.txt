10-03-2018

Base Class Constuctor Calling:
class Human:
	def __init__(self,name,gender,dob):
		
class Employee(Human):
	def __init__(self,name,gender,dob,salary):
		Human.__init__(self,name,gender,dob)

Runtime Polymorphism:
	rect=Rectangle(10,10)
    cr=Circle(5)
    sh=ShapeManager()
    sh.Draw(rect)
    sh.Draw(cr)

object method: invoked using object of a class
static method: invoked using classname
@staticmethod

class Test:
    @staticmethod
    def bar():
        print ("Static method bar")

class method: 
@classmethod 

class Test:
    @classmethod
    def bar(cls):
        print (id(cls))
        print ("Static method bar")
		
>>> import re
>>> help(re.sub)
Help on function sub in module re:

sub(pattern, repl, string, count=0, flags=0)
    Return the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in string by the
    replacement repl.  repl can be either a string or a callable;
    if a string, backslash escapes in it are processed.  If it is
    a callable, it's passed the match object and must return
    a replacement string to be used.

>>> help(re.subn)
Help on function subn in module re:

subn(pattern, repl, string, count=0, flags=0)
    Return a 2-tuple containing (new_string, number).
    new_string is the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in the source
    string by the replacement repl.  number is the number of
    substitutions that were made. repl can be either a string or a
    callable; if a string, backslash escapes in it are processed.
    If it is a callable, it's passed the match object and must
    return a replacement string to be used.

>>> re.sub("Good","Bad","I am Good Good I am Good")
'I am Bad Bad I am Bad'
>>> re.subn("Good","Bad","I am Good Good I am Good")
('I am Bad Bad I am Bad', 3)
>>> re.sub("Good","Bad","I am Good Good I am Good",2)
'I am Bad Bad I am Good'
>>> re.subn("Good","Bad","I am Good Good I am Good",2)
('I am Bad Bad I am Good', 2)
>>> t=re.subn("Good","Bad","I am Good Good I am Good",7)
>>> t
('I am Bad Bad I am Bad', 3)
>>> t[1]
3
>>> t[0]
'I am Bad Bad I am Bad'

non overlapping occurrence
>>> re.sub("nitin","Jyoti","nitinitin")
'Jyotiitin'

special characters

1) . : anything only once
	>>> i=re.search("a.b","acb")
	>>> i.start()
	0
	>>> i.end()
	3
	
	>>> re.search("a.b","ab")

	>>> i=re.search("a.b","xyzabbxyx")
	>>> i.start(),i.end()
	(3, 6)
	
2) ^ : beginning of string

>>> i=re.search("^T","This is")
>>> i.start(),i.end()
(0, 1)


3) $: ending of string

>>> i=re.search("T$","This is iT")
>>> i.start(),i.end()
(9, 10)

4) 

>>> i=re.search("a*b","ashbsfdjb")
>>> i.start(),i.end()
(3, 4)
>>> i=re.search("a+b","ashbsfdjb")
>>> i.start(),i.end()

Traceback (most recent call last):
  File "<pyshell#61>", line 1, in <module>
    i.start(),i.end()
AttributeError: 'NoneType' object has no attribute 'start'
>>> i=re.search("a+b","aaab")
>>> i.start(),i.end()
(0, 4)
>>> i=re.search("a+b","aabaabaaaab")
>>> i.start(),i.end()
(0, 3)
>>> i=re.search("a+b","abbaabaaaab")
>>> i.start(),i.end()
(0, 2)
>>> i=re.search("a*b*","aaab")
>>> i.start(),i.end()
(0, 4)
>>> 


first possible solution

>>> i=re.search("a*b*","aaab")
>>> i.start(),i.end()
(0, 4)
>>> i=re.search("a*b*?","aaab")
>>> i.start(),i.end()
(0, 3)
>>> i=re.search("a*b*?","aaabbbbc")
>>> i.start(),i.end()
(0, 3)
>>> i=re.search("a*b*","aaabbbb")
>>> i.start(),i.end()
(0, 7)
>>> i=re.search("a*b*?","aaabbbb")
>>> i.start(),i.end()
(0, 3)


>>> i=re.search("(a*b*)","aaabbbb")
>>> i.start(),i.end()
(0, 7)
>>> i=re.search("(a*b*)?","aaabbbb")
>>> i.start(),i.end()
(0, 7)

>>> i=re.search("ab*","aabbabbb")
>>> i.start(),i.end()
(0, 1)
>>> i=re.search("ab+","aabbabbb")
>>> i.start(),i.end()
(1, 4)

>>> i=re.search("(ab)*","abababab")
>>> i.start(),i.end()
(0, 8)
>>> 

>>> i=re.search("(ab)*?","abababab")
>>> i.start(),i.end()
(0, 0)
>>> i=re.search("(ab)+?","abababab")
>>> i.start(),i.end()
(0, 2)
>>> 


>>> i=re.search("a{1,5}b","aaab")
>>> i.start(),i.end()
(0, 4)
>>> i=re.search("a{1,5}b","aaaab")
>>> i.start(),i.end()
(0, 5)
>>> i=re.search("a{1,5}b","aaaaaaab")
>>> i.start(),i.end()
(2, 8)
>>> i=re.search("a{1,5}","aaaaaaa")
>>> i.start(),i.end()
(0, 5)
>>> i=re.search("a{1,5}","aaaa")
>>> i.start(),i.end()
(0, 4)

>>> i=re.search("ab{1,5}","aaaaaaabbsaabb")
>>> i.start(),i.end()
(6, 9)
>>> i=re.search("ab{1,5}?","aaaaaaabbsaabb")
>>> i.start(),i.end()
(6, 8)
>>> 

>>> i=re.search("[a-z]","abscds1234asbds")
>>> i.start(),i.end()
(0, 1)

>>> i=re.search("[a-z]+","abscds1234asbds")
>>> i.start(),i.end()
(0, 6)

>>> i=re.search("[a-zA-Z0-9]+","abscds1234asbds  hello")
>>> i.start(),i.end()
(0, 15)

[a-zA-Z0-9] is equivalent to \w (underscore is there)

>>> i=re.search("\w+","abscds1234asbds  hello")
>>> i.start(),i.end()
(0, 15)

Homework:

WAP to validate an email id using regular expression
WAP to accept an alphanumeric string from user and remove all characters other than digits using re

11-03-2018

>>> i=re.search("([a-zA-Z0-9_\.]+)@([\w\.]+)\.([\w]+)","jyotisathe1138@gmail.com")
>>> i.groups()
('jyotisathe1138', 'gmail', 'com')


>>> x=re.compile("^a")
>>> x.findall("a for aaple\n a for america")
['a']

>>> y=re.compile("^a",re.MULTILINE)
>>> y.findall("a for aaple\na for america")
['a', 'a']

>>> y.findall("a for aaple\na for america\nA for Avail")
['a', 'a']

>>> y=re.compile("^a",re.MULTILINE|re.I)
>>> y.findall("a for aaple\na for america\nA for Avail")
['a', 'a', 'A']

>>> y=re.compile(".+")
>>> y.findall("a for aaple\na for america\nA for Avail")
['a for aaple', 'a for america', 'A for Avail']
>>> y=re.compile(".+",re.S)
>>> y.findall("a for aaple\na for america\nA for Avail")
['a for aaple\na for america\nA for Avail']
>>>


>>> x=re.compile("\Aa")
>>> a=x.search("aahsh")
>>> a.start(),a.end()
(0, 1)

>>> x=re.compile("a\Z")
>>> a=x.search("aahsha")
>>> a.start(),a.end()
(5, 6)

[^a-zA-Z0-9] == "\W"

>>> x=re.compile("(\d+)")
>>> i=x.search("ksaj1839")
>>> i.start(),i.end()
(4, 8)
>>> i.groups()
('1839',)

>>> i.group(1)
'1839'

>>> re.sub("[a-zA-Z]+","","HAGDD1287hajfg287314")
'1287287314'

>>> x=re.compile("a\Z")
>>> a=x.search("aahsha")
>>> a.start(),a.end()
(5, 6)
>>>

>>> obj=re.compile(r"\ba\w+")
>>> obj.findall(" apple is sweet, america is ruled by trump")
['apple', 'america']

>>> obj=re.compile(r"\ba\w+a\b")
>>> obj.findall(" apple is sweet, america is ruled by trump a")
['america']

>>> obj.findall(" apple is sweet, america is ruled by trump aba")
['america', 'aba']

m in between
>>> obj=re.compile("\Bm\w+")
>>> obj.findall(" apple is sweet, america is ruled by trump aba")
['merica', 'mp']
>>> obj=re.compile("\w+\Bm\w+")
>>> obj.findall(" apple is sweet, america is ruled by trump aba")
['america', 'trump']

#WAP to accept a filename from user and display all words which are starting with digit or an _
#WAP to accept a filename from user and remove all single and multi line comments from that file
read a file
#
'''
'''
import tempfile
write lines withuot comment to temp file 
copy content of temp file into original file
#from presentation assignments

list of pattern and list of data
patterns[]
lines[]
for pattern:
	for lines:
		for match in finditer(pattern,line):
			print (match.start(),match.end(),line[match.start(),match.end()])